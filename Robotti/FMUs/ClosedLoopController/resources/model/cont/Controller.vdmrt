class Controller

	thread periodic(1e8, 0, 0, 0)(Step);
		
	instance variables
		private i: real;  
        -- GPS sensor
		private sensorGNSS_Pos_1: SensorGNSS;
		private sensorGNSS_Pos_Bad: SensorGNSS;
		private sensorGNSS_Pos_2: SensorGNSS;

		-- Voter
		private voter: Voter;

        -- actuators
		private actuatorAngle : ActuatorSteering;
		private actuatorSpeed : ActuatorSpeed;

        -- supervisory controller
		private modeControl : Supervisory := new Supervisory(); 
        
        -- sequence controller
		private waypointControl : Sequence;
		
        -- loop controller
		private steering : Steering := new Steering(); 

        -- held variables
		private steering_angle: real := 0.0;
		private speed: real := 0.0;
		inv speed >= 0.0;
		private mode : Supervisory`Mode := <Stopped>;

		-- x, y, theta, 0
		private PosGNSS: seq of real := [0.0, 0.0, 0.0, 0.0];
		private PosGNSS_1: seq of real := [0.0, 0.0, 0.0, 0.0];
		private PosGNSS_Bad: seq of real := [0.0, 0.0, 0.0, 0.0];
		private PosGNSS_2: seq of real := [0.0, 0.0, 0.0, 0.0];

        -- waypoints
		private init: bool := true;
		private route_name: seq of char := "";
		private route: Route := new Route([]);
		private wp: WayPoint := new WayPoint(0,0);
		
		
	values
		private REQUESTED_SPEED: real = 1.0;
		
	operations
	
		public Controller: seq of SensorGNSS * ActuatorSteering * ActuatorSpeed * Voter ==> Controller
		Controller(gnss_pos_list,aSt,aSp,vtr) == (
			i := 0.4;
			sensorGNSS_Pos_1 := gnss_pos_list(1); /* holds the refrence to the GNSS sensor */
			sensorGNSS_Pos_Bad := gnss_pos_list(2); /* holds the refrence to the bad GNSS sensor */
			sensorGNSS_Pos_2 := gnss_pos_list(3); /* holds the refrence to the GNSS sensor */
			
			voter := vtr;

			actuatorAngle :=  aSt;
			actuatorSpeed := aSp;

			route_name := "figure_8"; /* buch of other stuff to do the driving (apparently) */
			route := Route`LoadTravlRoute(route_name);
			waypointControl := new Sequence(route);
			mode := modeControl.GetMode(route);
		);
		
		public Step : () ==> ()
		Step () == (
			if init then (
				IO`printf("Route: %s, length: %s\n", [route_name, len route.getRoute()]);
				wp := route.NextWayPoint();
				init := false
			);

            -- output values held from previous cycle
			actuatorAngle.setValue(steering_angle);
			actuatorSpeed.setValue(speed);			

            -- read GPS: x, y, theta, 0
			-- do TMR on the three outputs
			PosGNSS_1 := sensorGNSS_Pos_1.read(); 
			PosGNSS_Bad := sensorGNSS_Pos_Bad.read(); 
			PosGNSS_2 := sensorGNSS_Pos_2.read(); 


			PosGNSS := sensorGNSS_Pos_1.read(); -- temp to make it run bad

			-- do TMR
			i := voter.choose_value(-100.3, 0.4, -100.3);
			PosGNSS(1) := i;
						
            -- get current mode from supervisory controller            
			mode := modeControl.GetMode(route); 
            
			-- if following, compute steering; if not, stop the robot
			if mode = <Following> then (
                -- get current target from sequence controller
				wp := waypointControl.GetTargetWayPoint(route, PosGNSS(1), PosGNSS(2)); 
				
                -- get steering angle from loop controller
                steering_angle := steering.GetSteeringAngle(wp, PosGNSS); 
				speed := REQUESTED_SPEED;
			)
			else if mode = <Stopped> then (
				speed := 0.0;
				return
			);
			IO`printf("Steering angle: %s, speed: %s, current position: [%s,%s], current waypoint: [%s,%s]\n", [steering_angle, speed, PosGNSS(1), PosGNSS(2), wp.PosX(), wp.PosY()]);
		);
		
end Controller
